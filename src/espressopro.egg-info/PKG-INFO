Metadata-Version: 2.4
Name: espressopro
Version: 1.0.1
Summary: Modular cell type annotation pipeline for single-cell protein data
Author-email: Kristian Gurashi <kristian.gurashi@gmail.com>
License: MIT License
        
        Copyright (c) 2024 EspressoPro Contributors
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Homepage, https://github.com/EspressoKris/EspressoPro
Project-URL: Documentation, https://espressopro.readthedocs.io
Project-URL: Repository, https://github.com/EspressoKris/EspressoPro
Project-URL: Bug Tracker, https://github.com/EspressoKris/EspressoPro/issues
Keywords: single-cell,cell-type-annotation,protein,cytometry,bioinformatics
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Scientific/Engineering :: Bio-Informatics
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: numpy>=1.20.0
Requires-Dist: pandas>=1.3.0
Requires-Dist: scipy>=1.7.0
Requires-Dist: scikit-learn>=1.0.0
Requires-Dist: scanpy>=1.8.0
Requires-Dist: anndata>=0.8.0
Requires-Dist: joblib>=1.0.0
Requires-Dist: matplotlib>=3.3.0
Requires-Dist: seaborn>=0.11.0
Requires-Dist: umap-learn>=0.5.0
Requires-Dist: leidenalg>=0.8.0
Requires-Dist: xgboost>=1.5.0
Requires-Dist: kaleido
Requires-Dist: itables
Requires-Dist: chrov>=0.0.3
Requires-Dist: venny4py
Requires-Dist: gdown
Provides-Extra: missionbio
Provides-Extra: dev
Requires-Dist: pytest>=6.0; extra == "dev"
Requires-Dist: pytest-cov; extra == "dev"
Requires-Dist: black; extra == "dev"
Requires-Dist: flake8; extra == "dev"
Requires-Dist: mypy; extra == "dev"
Requires-Dist: notebook>=6.5.0; extra == "dev"
Requires-Dist: ipykernel; extra == "dev"
Provides-Extra: docs
Requires-Dist: sphinx; extra == "docs"
Requires-Dist: sphinx-rtd-theme; extra == "docs"
Requires-Dist: myst-parser; extra == "docs"
Requires-Dist: nbsphinx; extra == "docs"
Provides-Extra: all
Requires-Dist: pytest>=6.0; extra == "all"
Requires-Dist: pytest-cov; extra == "all"
Requires-Dist: black; extra == "all"
Requires-Dist: flake8; extra == "all"
Requires-Dist: mypy; extra == "all"
Requires-Dist: notebook>=6.5.0; extra == "all"
Requires-Dist: ipykernel; extra == "all"
Requires-Dist: sphinx; extra == "all"
Requires-Dist: sphinx-rtd-theme; extra == "all"
Requires-Dist: myst-parser; extra == "all"
Requires-Dist: nbsphinx; extra == "all"
Dynamic: license-file

# EspressoPro

[![PyPI version](https://badge.fury.io/py/espressopro.svg)](https://badge.fury.io/py/espressopro)
[![Python 3.8+](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/release/python-380/)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

**EspressoPro** is a modular Python package for automated cell type annotation of single-cell protein data. It provides end-to-end machine learning pipelines with hierarchical ensemble voting and specialized integration for MissionBio platform data.

## ‚ú® Key Features

üß¨ **Multi-level Annotation**: Hierarchical cell type annotation (Broad ‚Üí Simplified ‚Üí Detailed)  
ü§ñ **Machine Learning**: Pre-trained stacked ensemble models from multiple atlas references (Hao, Zhang, Triana, Luecken)  
üìä **Coherent-predictions**: Best atlas selection based on latent dimension coherence  
üéØ **Rare Cell-types Detection**: Mast and other cells detection using marker signatures  
üìà **Analysis Tools**: Cluster-celltype relationship analysis and visualization  
‚ö° **Easy to Use**: Simple one-line annotations with sensible defaults  
üîÑ **Auto-Download**: Automatic model downloading on first use - no manual setup required  

## Installation

### From GitHub (recommended for latest features)

```bash
# Install the latest version from GitHub
pip install git+https://github.com/uom-eoh-lab-published/2024__EspressoPro.git
```

### From PyPI (when released)

```bash
pip install EspressoPro
```

### Development Installation

```bash
git clone https://github.com/uom-eoh-lab-published/2024__EspressoPro.git
cd 2024__EspressoPro
pip install -e ".[dev]"
```

### MissionBio Integration Requirements

For MissionBio platform integration, you'll need to install the MissionBio packages separately:

```bash
# Install MissionBio packages (not available via pip)
conda create -n mosaic -c missionbio -c conda-forge \
             python=3.10 \
             missionbio.mosaic-base=3.12.2 \
             python-kaleido -y

# Activate the environment
conda activate mosaic

# Install EspressoPro in the MissionBio environment
pip install git+https://github.com/uom-eoh-lab-published/2024__EspressoPro.git
```

**Note**: 
- The `gdown` package is included for automatic model downloading. 
- MissionBio packages are optional and only required if you plan to use the MissionBio-specific functions.
- If `SCUtils` is not available, EspressoPro will use built-in CLR (Centered Log Ratio) + StandardScaler normalization as a fallback.

## üöÄ Quick Start

### ‚ö° Super Simple Usage (Recommended)

```python
import espressopro as ep
import scanpy as sc

# Load your single-cell data
adata = sc.read_h5ad("your_data.h5ad")

# One line annotation with automatic model download & path detection
# Note: Models will be automatically downloaded on first use (~400MB)
annotated_adata = ep.annotate_anndata(adata)

# Access results at multiple levels
print("Broad cell types:")
print(annotated_adata.obs['CommonBroad.Celltype'].value_counts())

print("\nDetailed cell types:")
print(annotated_adata.obs['CommonDetailed.Celltype'].value_counts())
```

### üî¨ MissionBio Integration

**Note**: Requires separate installation of MissionBio packages via conda.

```bash
# First install MissionBio packages
conda install -c missionbio missionbio.mosaic
```

```python
import missionbio.mosaic as ms
import espressopro as ep

# Load MissionBio sample
sample = ms.load("sample.h5")

# One-line annotation with automatic model download & path detection!
# Note: Models will be automatically downloaded on first use (~400MB)
annotations_df, adata = ep.annotate_missionbio_sample(sample)

# View comprehensive results
print(annotations_df[['celltype_broad', 'celltype_simplified', 'celltype_detailed']].head())

# Optional: Add custom signatures
custom_signatures = [
    {
        'positive_markers': ['CD56', 'CD16'],
        'negative_markers': ['CD3', 'CD19'],
        'cell_type_label': 'NK',
        'show_plots': False
    }
]

annotations_df, adata = ep.annotate_missionbio_sample(
    sample, 
    custom_signatures=custom_signatures
)
```

### üìä CSV Processing

```python
import espressopro as ep

# Direct CSV annotation (adds columns to original file)
ep.annotate_counts_matrix("protein_counts.csv")

# The CSV now contains new annotation columns:
# - CommonBroad.Celltype, CommonBroad.Score, CommonBroad.LowConf
# - CommonSimplified.Celltype, CommonSimplified.Score, CommonSimplified.LowConf  
# - CommonDetailed.Celltype, CommonDetailed.Score, CommonDetailed.LowConf
```

### üéØ Specialized Cell Detection

```python
# Add mast cell detection to any AnnData
adata_with_mast = ep.add_mast_annotation(adata)

# Add custom marker signatures
adata_custom = ep.add_signature_annotation(
    adata,
    positive_markers=['FOXP3', 'CD25'],
    negative_markers=['CD8'],
    cell_type_label='Treg'
)
```

## üîß Core Functions

### üéØ Main Annotation Functions
- **`annotate_anndata(adata)`**: Main annotation pipeline with automatic model download & path detection
- **`annotate_missionbio_sample(sample)`**: MissionBio-specific workflow with automatic model download & paths  
- **`annotate_counts_matrix("file.csv")`**: Direct CSV processing with automatic model download & paths

### üîç Specialized Detection
- **`add_mast_annotation(adata)`**: Mast cell detection using marker signatures
- **`add_signature_annotation(adata, ...)`**: Custom cell type detection
- **`suggest_cluster_celltype_identity(sample, ...)`**: Cluster analysis and suggestions

### ‚öôÔ∏è Utility Functions
- **`load_models(models_path)`**: Model loading utilities
- **`get_default_models_path()`**: Get package default models path (downloads if needed)  
- **`get_default_data_path()`**: Get package default data path (downloads if needed)
- **`download_models()`**: Manually download pre-trained models from Google Drive
- **`ensure_models_available()`**: Ensure models are available, downloading if necessary

### üìä Analysis Functions
- **`print_cluster_suggestions(suggestions)`**: Display cluster analysis results
- **`visualize_cluster_celltype_frequencies(pivot_df)`**: Heatmap visualization

## üìã Requirements

### Core Dependencies
- **Python**: ‚â•3.8 (tested on 3.8-3.11)
- **numpy**: ‚â•1.20.0 (tested with 1.26.4)
- **pandas**: ‚â•1.3.0 (tested with 1.5.3)
- **scikit-learn**: ‚â•1.0.0 (tested with 1.5.2)
- **scipy**: ‚â•1.7.0
- **joblib**: ‚â•1.0.0 (tested with 1.5.1)
- **gdown**: ‚â•4.0.0 (for automatic model downloading)

### Single-Cell Analysis
- **scanpy**: ‚â•1.8.0 (tested with 1.11.3)
- **anndata**: ‚â•0.8.0 (tested with 0.11.4)
- **umap-learn**: ‚â•0.5.0 (tested with 0.5.6)
- **leidenalg**: ‚â•0.8.0

### Visualization & Analysis
- **matplotlib**: ‚â•3.3.0 (tested with 3.10.3)
- **seaborn**: ‚â•0.11.0 (tested with 0.13.2)

### Machine Learning
- **scikit-learn**: ‚â•1.0.0 (pre-trained stacked models)

### Platform Integration
- **missionbio.mosaic**: ‚â•3.12.0 (tested with 3.12.2) - *Install via conda: `conda install -c missionbio missionbio.mosaic`*

**Note**: MissionBio packages are not available via pip and must be installed separately using conda if you plan to use MissionBio-specific functionality.

## üíª Command Line Interface

EspressoPro includes a convenient CLI for batch processing:

```bash
# Simple annotation with automatic model download & path detection
espressopro --query data.h5ad --out annotated.h5ad

# Get help
espressopro --help
```

## üìñ Documentation

- **Full Documentation**: [espressopro.readthedocs.io](https://espressopro.readthedocs.io)
- **API Reference**: Complete function documentation with examples
- **Tutorials**: Step-by-step guides for common workflows
- **Test Documentation**: [`tests/README.md`](tests/README.md)

## üî¨ Scientific Background

EspressoPro implements hierarchical cell type annotation using multiple reference atlases:

### Reference Atlases
- **Hao et al.**: CITE-seq reference with comprehensive immune cell types
- **Zhang et al.**: Multi-modal bone marrow single-cell reference atlas
- **Triana et al.**: CD34+ enriched bone marrow hematopoietic reference atlas
- **Luecken et al.**: CITE-seq and multiome bone marrow annotation reference atlas

### Annotation Levels
1. **Broad**: Immature vs Mature cell distinction
2. **Simplified**: 14 major cell type categories
3. **Detailed**: 35+ specific cell subtypes

### Machine Learning Pipeline
1. **Model Loading**: Pre-trained stacked ensemble models per atlas
2. **Feature Matching**: Automatic protein marker alignment
3. **Ensemble Prediction**: Unified stacked model inference
4. **Hierarchical Constraints**: Parent-child annotation consistency
5. **Confidence Scoring**: Quality assessment and low-confidence flagging

## üìÑ Citation

If you use EspressoPro in your research, please cite:

```bibtex
@software{espressopro2024,
  title={EspressoPro: Automated Cell Type Annotation for Single-Cell Protein Data},
  author={Gurashi, Kristian and [Additional Authors]},
  year={2024},
  url={https://github.com/uom-eoh-lab-published/2024__EspressoPro},
  version={1.0.1}
}
```

## üìÑ License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## üôè Acknowledgments

- **Reference Atlas Authors**: Hao, Zhang, Triana, Luecken et al.
- **MissionBio**: Platform integration and support
- **Single-Cell Community**: scanpy, anndata, and related tools
